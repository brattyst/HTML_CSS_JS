2025/05/10

- script tag
  브라우저가 이 태그를 만나면 안의 코드를 자동으로 처리함
  - Attribute 
    - type : <script type= ...> </script>
    HTML 4에서 명시 하는게 필수였음/ 현재 명시 필수가아니게 되서 잘 안쓰임
    - language : <script language = ...></script>
    현재 사용하고있는 스크립트 언어를 나타냄. 지금은 자바스크립트가 기본 언어 기에 속성의 이미가 퇴색됨.
    
    - src : <script src="path.."></script>
    외부에서 js 파일을 불러옴. 절대경로 혹은 상대경로로 지정가능.
      !주의점 : scr 속성이 있다면 내부코드 무시함


- Semicolon
  JS에서는 줄바꿈이 있으면 '암시적' 세미콜론으로 해석딤 (automatic semicolon insertion)
  * 생략가능하지만 세미콜론을 사용하도록. 예제

- Comment
  // : 한줄짜리주석
  /* */ : 복수의 줄

- 엄격 모드
  "use strict"; or 'use strict' 
  오류를 더 엄격하게 감지, 방수할 수 있게 함.
  스크립트의 최상단 이아닌 함수 본문 맨앞에 올 수도 있다. 작성된것 기준 뒤에것만 작성됨. 

- 변수 선언 
  - let, var :
  동일한 역할이지만, var 은 오래된 방식. 미묘한 차이점이 있다함

  - camelCase 가 주로 사용됨

  -use strict 를 사용할것
   ex)
      num = 5;  // num 정의 되지않아도, 단순 할당으로 변수가 생성됨.
      alert(num) // 5

      ==============

      "use strict";
      num = 5; // error: num is not defined

- 상수 선언
  - const = ..; 
  : 변화 하지않은 변수를 선언시 사용
  대문자로 상수 선언 추천 '하드 코딩한' 값의 별칭을 만들 때 사용한다.


- 자료형
  - string : "txt", 'txt', `txt` 3개가 있다.
    "", '' :  기본적인 따옴표로 큰 차이점이 없음.
    `` : back tick 
    역 따옴표로 변수나 표현식을 감싼후 ${}를 사용해 변수나 표현식을 문자열 중간에 넣을수 있음.

    *char 타입은 존재 하지않음.

  -boolean : 기본적으로 같음 

  - null : 어느 자료형에도 속하지않음. 자바스크립트에서는 
   empty valuable unknown valuable의 의미로 쓰임

   -undifined : 변수 선언 했지만, 값은 할당하지않았다면 변수에 자동으로 할당됨. 명시적으로 할당 가능.

   *`알수없는` 상태를 나타내려는거면 null 사용을 추천함. undefined는 값이 할당되지 않은 변수의 초기값을 위해 예약어로 남겨둔다.*



- typeof : 연산자는 피연산자의 자료형을 알려줍니다.

  typeof x 또는 typeof(x) 형태로 사용합니다.
  피연산자의 자료형을 문자열 형태로 반환합니다.
  null의 typeof 연산은 "object"인데, 이는 언어상 오류입니다. null은 객체가 아닙니다.


상호작용
 -alert : 메세지가 있는 작은 창 모달창(modal window) 확인 버튼 이외에 행동불가 확인 버튼하 모달창 바깥에 있는 버튼을 눌루거나 할수있음.

- prompt : 두개의 인자를 전달밭음
  prompt(title, [default]);
    -title : 사용자에게 보여줄 문자열
    -default : 입력필드의 초기값 []는 optional 이라는 뜻.

    -> Cancel 혹은 ESC로 빠져나갈수있고, 입력 취소의 경우 null이 반환됨.

  - confirm :
  result = confirm(question);

  매개변수로 받은 질문과 확인 취소 버튼이 있는 ㅁ모달 창을 보여줌
  확인시 ture 그외의 경우 false 를 반환함.
  
====================
2025/05/11

원시형의 변환

- 문자형으로 반환
  String(value);
  * String(false) -> "false", String(null) -> "null"

- 숫자형으로 변환
 "6" / "2" = // 3

  Number("123") -> 123
  Number("aaa123") -> Nan
  * Number(undefined) -> Nan
  Number(null) -> 0
  true, false ->  1, 0
  
  string에서 만약 "   123   " -> 123 
  같이 공백이 있는경우 남아있는 문자열이 없다면 0, 그렇지않다면 문자열에서 숫자를 읽음. 

- 불린형으로 변환
  Boolean(value)
  1 -> ture
  0 -> false

  "string" -> true
  "" -> false : 빈문자열의 경우

  ** Boolean("0") -> true

이항연산자
 - 덧셈 연산자 '+'
  덧셈의 경우, 피 연산자의 순서 관계 없이 어느 하나가 문자열이면 다른 하나도 문자열로 바뀌게됨. 

- 단항 덧셈 '+'
  * 피연산자가 숫자가 아닌경우 숫자형으로 변환이 일어남 *
  ex) alert(+true) // 1
      alert(+""); // 0
  
  - 뺄셈 연산자. '-'
    숫자로 바꾼후 연산됨.
    * "4px" - 2 // NaN

  - 쉼표 연산자 ','
    마지막의 연산결과가 할당됨
    ex) let x = (y = 10, z = 20, y + z);
        console.log(x) // 30

  - 비교연산 
    '2' > 1 // true
    문자열 '2' 가 숫자로 변환된후 비교 진행
    '01' == 1 // true

    - === 일치 연산자
      엄격한 동등 연산자임. 자료형의 동등 여부까지 검사하기에 다를 경우 false 반환
      ex)
        null undefined 비교
        null == undefined // true
        === 일때 false

        alert( 0 === false); // false
      * !== 엄격 불일치연산자

      - null vs 0
        null > 0 false
        null == 0 false
        null >= true
        * null은 오직 undefined 와 같다고 간주됨

    - 조건부 연산자 '?'
      //let result = condition ? value1 : value2;

      condition 이truthy value1 falsy  value2
    
    - 논리 연산자 '||'

    1. truthy를 찾는 OR 연산자 ‘||’
      기본적으로 같지만 피연산자가 여래개의 경우

      result = val1 || val2 || val3;

      1. 왼쪽부터 시작해 오른족으로 나아가며 피 연산자를 평가
      2. 각 피연산자를 불린형으로 반환함. 그값이 true 이면 연산값을 멈추고 해당 피연산자의 변환전 원래값을 반환한다.
      3. 피연산자 모두를 평가한 경우(모두 false)인경우 마지막 피연산자를 반환함.
      *형변환하지않은 원래의 값을 리턴*

      즉, 첫 truthy를 반환 

      ex) 

      alert( 1 || 0 ); // 1 (1은 truthy임)

      alert( null || 1 ); // 1 (1은 truthy임)
      alert( null || 0 || 1 ); // 1 (1은 truthy임)

      * alert( undefined || null || 0 ); // 0 (모두 falsy이므로, 마지막 값을 반환함) *

    2. 단락 평가

    true || alert("not printed");
    false || alert("printed");

    인경우 1번째 줄 ture 에서 종료, 2번째줄 false이기에 그다음 값이 반환되어 최종적으로 printed만 출력됨.

  - And &&

  1. 여러 피연산자일경우
  result = value1 && value2 && value3;

  1. 가장 왼쪽에서 시작해 오른쪽으로 가며 피연산자를 평가.
  2. * 각 피연산자는 모두 불린형으로 변환됨. 변환후 값이 false면 평가를 멈추고 해당 피연산자의 변환전 값을 반환함. *
  3. 피연산자가 모두평가되는경우 (모두true)일경우 마지막 피연산자가 반환됨

  즉 첫뻔째의 falsy를 반환함. false 없다면 마지막값반환

- Not '!'
  result = !value;
    1. 피연산자를 불린형으로 변환.
    2. 1에서 변환된 값을 역으로 반환함.

  - !! 하면 값을 불린형으로 변환함.
    alert( !!"non-empty string"); //true
    alert( !!null);false


  alert 메소드는 값을 반환하지않음, 즉 undefined를 반환한다.
  alert( alert(1) || 2 || alert(3) ); 의 경우 
  1, 2 출력

  * && 연산자는 || 보다 우선순위가 높다 *
  alert( null || 2 && 3 || 4 );
    1. 2 && 3 -> 3
    2. null || 3 || 4
      -> 3

  -nullish 병합 연산자 '??'

    - 동작순서
    a ?? b
    1. a 가 null도 아니고 undefined도 아니면 a
    2. 그외에 b
    
    - || 과의 차이? 

    height = height ?? 100;  정의 되지않았으므로 100이 할당됨

    let height = 0;

    alert(height || 100); // 100
    alert(height ?? 100); // 0

    - 우선순위는 5로 낮음

    ?? 는 = 와 ? 보다 먼저, 대부분의 연산자보다 나중에 평가되므로 괄호를 추가하는게 좋다.
    *?? 연산자는  && 와  || 같이 사용불가 
        let x = 1 && 2 ?? 3; // SyntaxError: Unexpected token '??'
        -> let x = (1 && 2) ?? 3; // 2
  
  - Loop
    do while
    do {
      반복문
    } while(condition)

    위 의것은 반복문 먼저 실행후 조건을 학인후 조건이 참인동안 계속실행됨.
    *do..while 문법은 조건이 truthy 인지 아닌지에 상관없이, 본문을 최소한 한 번이라도 실행하고 싶을 때만 사용해야 합니다. 대다수의 상황에선 do..while보다 while(…) {…}이 적합합니다.*
  